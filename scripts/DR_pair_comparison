#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Sep 13 10:30:43 2017

@author: hhuang2
"""

# import glob
import sqlite3 as sql
# from utils import phase_block_check as ps
from utils import IMGTdbIO

locus = 'A'

pkl_fp = '../Output/SG39_DRpairs/SG39_HLA_'+ locus +'_paired.pkl'

DRpair_seqInfo = IMGTdbIO.load_pickle2dict(pkl_fp)

case_count = len(DRpair_seqInfo)
print('Locus '+locus+ ' has '+ str(case_count) + ' paired cases.')

DB_fp = "../Output/SG39_DRpairs/SG39_HLA_"+ locus +"_paired.db"
conn = sql.connect(DB_fp)
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS DR_pair_comparison 
               (BMT_caseID text, QC text, 
               PS1_HLATyping text, 
               PS1_GLstringM text, PS1_SeqM text, 
               PS2_HLATyping text,
               PS2_GLstringM text, PS2_SeqM text,
               Audit text, Active text, Comment text)''')

conn.commit()
for caseID, SeqInfo in DRpair_seqInfo.items():
    Active = SeqInfo['Active']
    Audit = SeqInfo['Audit']
    Comment = SeqInfo['Comment']
    QC = SeqInfo['QC']
    
    PS1_HLATyping = SeqInfo['PS1']['HLATyping']
    PS2_HLATyping = SeqInfo['PS2']['HLATyping']
    
    if QC == 'PASS':
        PS1_GLstringM = 'Y'
        PS2_GLstringM = 'Y'
    else:
        PS12_qc = QC.split(";")
        if PS12_qc[0] == 'PASS':
            PS1_GLstringM = 'Y'
        else:
            PS1_GLstringM = 'N'
            
        if PS12_qc[1] == 'PASS':
            PS2_GLstringM = 'Y'
        else:
            PS2_GLstringM = 'N'
    
    if SeqInfo['PS1']['Recipient'] == SeqInfo['PS1']['Donor']:
        PS1_SeqM = 'Y'
    else: 
        PS1_SeqM = 'N'
    DRpair_seqInfo[caseID]['PS1']['isSeqMatch'] = PS1_SeqM
        
    if SeqInfo['PS2']['Recipient'] == SeqInfo['PS2']['Donor']:
        PS2_SeqM = 'Y'
    else: 
        PS2_SeqM = 'N'
        
    DRpair_seqInfo[caseID]['PS2']['isSeqMatch'] = PS2_SeqM
    
    record = (caseID, QC, PS1_HLATyping, PS1_GLstringM, PS1_SeqM, PS2_HLATyping, PS2_GLstringM, PS2_SeqM, Active, Audit, Comment,)
    cursor.execute('INSERT INTO DR_pair_comparison VALUES (?,?,?,?,?,?,?,?,?,?,?)', record)

conn.commit()   
conn.close()

fname = '../Output/SG39_DRpairs/SG39_HLA_' + locus + '_wComparison'
IMGTdbIO.save_dict2pickle(DRpair_seqInfo, fname)

########### check GL-string match, sequence matching
DRpair_seqInfo = {}
Loci = ['A','B', 'C', 'DRB1', 'DQB1', 'DPB1']

All_caseIDs = []
for locus  in Loci:
    fname = '../Output/SG39_DRpairs/SG39_HLA_' + locus + '_wComparison.pkl'
    DRpair_seqInfo[locus] = IMGTdbIO.load_pickle2dict(fname)
    All_caseIDs += list(DRpair_seqInfo[locus].keys())
All_caseIDs = list(set(All_caseIDs)) # 3412 total

Matching_cases_stats = {"ClassI_paired":[], "fiveLoci_paired":[], "All_paired":[], 
                        "A_both_SeqMatch":[], "A_both_Seqmm":[], "A_one_Seqmm":[], 'A_GLmm_SeqM':[], 'A_GlM_Seqmm':[],
                        "B_both_SeqMatch":[], "B_both_Seqmm":[], "B_one_Seqmm":[], 'B_GLmm_SeqM':[], 'B_GlM_Seqmm':[],
                        "C_both_SeqMatch":[], "C_both_Seqmm":[], "C_one_Seqmm":[], 'C_GLmm_SeqM':[], 'C_GlM_Seqmm':[],
                        "DRB1_both_SeqMatch":[], "DRB1_both_Seqmm":[], "DRB1_one_Seqmm":[], 'DRB1_GLmm_SeqM':[], 'DRB1_GlM_Seqmm':[],
                        "DPB1_both_SeqMatch":[], "DPB1_both_Seqmm":[], "DPB1_one_Seqmm":[], 'DPB1_GLmm_SeqM':[], 'DPB1_GlM_Seqmm':[],
                        "DQB1_both_SeqMatch":[], "DQB1_both_Seqmm":[], "DQB1_one_Seqmm":[], 'DQB1_GLmm_SeqM':[], 'DQB1_GlM_Seqmm':[]}
for caseID in All_caseIDs:
    
    classI_flag = True
    fiveLoci_flag = True
    All_flag = True
    
    for locus in Loci:
        isExist = caseID in DRpair_seqInfo[locus].keys()
        All_flag = All_flag and isExist
        if locus in ['A', 'B', 'C']:
            classI_flag = classI_flag and isExist
        if locus != 'DPB1':
            fiveLoci_flag = fiveLoci_flag and isExist
        
        if isExist:
            if DRpair_seqInfo[locus][caseID]['PS1']['isSeqMatch'] == 'Y' and DRpair_seqInfo[locus][caseID]['PS2']['isSeqMatch'] == 'Y':
                Matching_cases_stats[locus+'_both_SeqMatch'].append(caseID)
                if DRpair_seqInfo[locus][caseID]['QC'] != 'PASS':
                    Matching_cases_stats[locus+'_GLmm_SeqM'].append(caseID)
            elif DRpair_seqInfo[locus][caseID]['PS1']['isSeqMatch'] != 'Y' and DRpair_seqInfo[locus][caseID]['PS2']['isSeqMatch'] != 'Y':
                Matching_cases_stats[locus+'_both_Seqmm'].append(caseID)
                if DRpair_seqInfo[locus][caseID]['QC'] == 'PASS':
                    Matching_cases_stats[locus+'_GlM_Seqmm'].append(caseID)
            else: # one mismatch
                Matching_cases_stats[locus+'_one_Seqmm'].append(caseID)
                if DRpair_seqInfo[locus][caseID]['QC'] == 'PASS':
                    Matching_cases_stats[locus+'_GlM_Seqmm'].append(caseID)
    if All_flag:
        Matching_cases_stats["All_paired"].append(caseID)
    
    if classI_flag:
        Matching_cases_stats["ClassI_paired"].append(caseID)
        
    if fiveLoci_flag:
        Matching_cases_stats["fiveLoci_paired"].append(caseID)
    
fname = '../Output/SG39_DRpairs/SG39_pairedCases_Stats'
IMGTdbIO.save_dict2pickle(Matching_cases_stats, fname)

print("Paired at all 6 loci cases: " + str(len(Matching_cases_stats['All_paired'])))
print("Paired at all 5 loci cases: "+ str(len(Matching_cases_stats['fiveLoci_paired'])))
print("Paired at Class I loci cases: "+ str(len(Matching_cases_stats['ClassI_paired'])))
for locus in Loci:
    print("Both sequences matched at locus " + locus + ": " + str(len(Matching_cases_stats[locus+'_both_SeqMatch'])))

for locus in Loci:
    print("Both sequences MisMatched at locus " + locus + ": " + str(len(Matching_cases_stats[locus+'_both_Seqmm'])))

for locus in Loci:
    print("One sequence MisMatched at locus " + locus + ": " + str(len(Matching_cases_stats[locus+'_one_Seqmm'])))
    
for locus in Loci:
    print("One or both sequences matched but GL-string mismatched at locus " + locus + ": " + str(len(Matching_cases_stats[locus+'_GLmm_SeqM'])))

for locus in Loci:
    print("One or both sequences MisMatched but GL-string matched at locus " + locus + ": " + str(len(Matching_cases_stats[locus+'_GlM_Seqmm'])))

############################
# Check unmatched sequences
############################
from utils import CompareSeq
fname = '../Output/SG39_DRpairs/SG39_pairedCases_Stats.pkl'
Matching_cases_stats = IMGTdbIO.load_pickle2dict(fname)

locus = 'A'
# both mismatched sequences
MM_caseID = Matching_cases_stats[locus+'_both_Seqmm']

DB_fp = '../Output/SG39_DRpairs/SG39_HLA_'+ locus +'_paired.db'
con = sql.connect(DB_fp)
con.row_factory = sql.Row
cur = con.cursor()

for caseID in MM_caseID:
    t = (caseID,)
    cur.execute('SELECT * FROM OriginalSeqs WHERE BMT_caseID = ?', t)
    case_records = cur.fetchall()
    seq1_ID = 'Recipient'
    seq2_ID = 'Donor'
    seq1 = case_records[1][seq1_ID]
    seq2 = case_records[1][seq2_ID]
    HLAtyping = case_records[1]['HLATyping']
    alignment, pos, annotation = CompareSeq.compare_seqs(seq1, seq2, seq1_ID, seq2_ID, algn_file, saveFile = True, HLAtyping = None, DB_field ='*')
    
    
    